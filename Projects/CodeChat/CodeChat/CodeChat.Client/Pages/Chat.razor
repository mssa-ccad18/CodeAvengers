@page "/chat/{RoomName}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using CodeChat.Client.Components.Models
@using CodeChat.Client.Services.Encryption
@using CodeChat.Client.Services
@inject NavigationManager Navigation
@inject IJSRuntime _jsRuntime
@inject ChatEncryptionService _encryptionService
@inject UserSessionService Session

<PageTitle>@RoomName</PageTitle>
<head>
    <link href="css/chat.css" rel="stylesheet" />
    <script src="crypto.js"></script>
</head>


<div class="chat-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="room-header">
            <span class="room-name">@RoomName</span>
        </div>
        <!-- User list -->
        <div class="user-list">
            <div class="user-item user-owner">
                <span>@RoomOwner</span>
            </div>
            @foreach (var user in userList)
            {
                <div class="user-item">
                    <span>@user</span>
                </div>
            }
        </div>
    </div>

    <!-- Main Chat Area -->
    <div class="chat-area">
        <div class="chat-header">
            <span class="room-name">Room Name</span>
        </div>
        <div class="chat-messages" id="messageContainer">
             @* <div class="status-message"> 
                 <!-- output each status update --> 
                 @foreach (var statusItem in statusLog) 
                 { 
                     <div>@statusItem</div> 
                 } 
             </div> *@
            @foreach (var message in Messages)
            {
                <div>@message.Sender: @GetDecryptedMessageContent(message)</div>
            }
        </div>
    </div>
</div>

<!-- GPT-style Bottom Chat Bar -->
<div class="chat-input-bar">
    <textarea class="chat-input" placeholder="Type a message here..." @bind="messageInput"></textarea>
    <button class="chat-send-button" @onclick="SendMessage">
        Send
    </button>
</div>

@code {
    [Parameter]
    public string RoomName { get; set; } = string.Empty;

    private HubConnection? connection;
    private List<string> statusLog = new();
    private List<ChatMessage> Messages = new();
    private List<string> userList = new();
    private Dictionary<byte[], string> decryptedMessages = new Dictionary<byte[], string>(new ByteArrayComparer());
    private string? messageInput;
    private string? username;
    private string? RoomOwner;
    private string? RoomID;
    private string? status = "current status";

    // Utility class to compare byte arrays in dictionary
    private class ByteArrayComparer : IEqualityComparer<byte[]>
    {
        public bool Equals(byte[]? x, byte[]? y)
        {
            if (x == null || y == null)
                return x == y;

            if (x.Length != y.Length)
                return false;

            for (int i = 0; i < x.Length; i++)
            {
                if (x[i] != y[i])
                    return false;
            }

            return true;
        }

        public int GetHashCode(byte[] obj)
        {
            if (obj == null)
                return 0;

            int hash = 17;
            foreach (var b in obj)
            {
                hash = hash * 31 + b;
            }
            return hash;
        }
    }

    // protected override async Task OnInitializedAsync()
    // {   
    // } 

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // initialize the session
            await Session.InitializeAsync();
            username = Session.Username;
            // Check if the user is logged in
            if (!Session.IsLoggedIn) {
                Navigation.NavigateTo("/");
                return;
            }

            await InitializeSignalR();

            // Make sure RoomID is set before proceeding
            if (!string.IsNullOrEmpty(RoomID)) {
                await EnsureKeyPair();
                await InitializeRoomState();
            }
            

        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task EnsureKeyPair() {
        var publicKey = await _jsRuntime.InvokeAsync<byte[]>("resetKeyPair");
        if (publicKey == null) {
            AddStatus("Error: Failed to reset key pair");
            return;
        }

        // Update the user's public key in the database
        await connection.InvokeAsync<bool>("UpdateUserPublicKey", username, publicKey);
    }

    

    private async Task InitializeRoomState() {
        AddStatus("Requesting room key...");

        // Request the room key from the server
        var encryptedRoomKey = await connection.InvokeAsync<byte[]>("RequestRoomKey", username, RoomName);
        if (encryptedRoomKey == null) {
            AddStatus("Error retrieving room key");
            return;
        } else {
            AddStatus($"Room key retrieved for room {RoomID}, decrypting...");
        }
        // decrypt the room key - pass both the encrypted key and the roomID
        var decryptedRoomKey = await _jsRuntime.InvokeAsync<object>("decryptRoomKey", encryptedRoomKey, RoomID);
        if (decryptedRoomKey == null) {
            AddStatus("Error decrypting room key");
            return;
        } else {
            AddStatus("Room key decrypted and stored successfully");
        }

        // Verify key storage by trying to retrieve it
        await VerifyKeyStorage();

        // Decrypt all messages now that we have the key
        await DecryptAllMessages();
    }

    private void AddStatus(string message)
    {
        status = message;
        statusLog.Add(message);
        StateHasChanged();
    }

    private async Task DecryptAllMessages()
    {
        if (Messages == null || Messages.Count == 0 || string.IsNullOrEmpty(RoomID))
            return;

        try {
            foreach (var message in Messages)
            {
                if (message.Content != null && !decryptedMessages.ContainsKey(message.Content))
                {
                    try {
                        string decryptedContent = await DecryptMessageContent(message);
                        decryptedMessages[message.Content] = decryptedContent;
                    }
                    catch (Exception ex) {
                        AddStatus($"Error decrypting message: {ex.Message}");
                        decryptedMessages[message.Content] = "[Encrypted]";
                    }
                }
            }
            StateHasChanged();
        }
        catch (Exception ex) {
            AddStatus($"Error in DecryptAllMessages: {ex.Message}");
        }
    }

    private string GetDecryptedMessageContent(ChatMessage message)
    {
        if (message.Content == null)
            return "[No content]";

        if (decryptedMessages.TryGetValue(message.Content, out string? decryptedContent))
            return decryptedContent;

        // If we haven't decrypted it yet, queue it for decryption and show a placeholder
        Task.Run(async () => {
            try {
                string content = await DecryptMessageContent(message);
                decryptedMessages[message.Content] = content;
                StateHasChanged();
            }
            catch (Exception ex) {
                Console.WriteLine($"Error decrypting message: {ex.Message}");
            }
        });
        return "[Decrypting...]";
    }

    private async Task<string> DecryptMessageContent(ChatMessage message)
    {
        if (message.Content == null)
            return "[No content]";
        try {
            return await _jsRuntime.InvokeAsync<string>("decryptMessage", message.Content, RoomID);
        }
        catch (Exception ex) {
            Console.WriteLine($"Error in DecryptMessageContent: {ex.Message}");
            return "[Decryption failed]";
        }
    }

    private async Task VerifyKeyStorage()
    {
        try {
            AddStatus("Verifying key storage...");

            // Try to retrieve the key we just stored
            var keyExists = await _jsRuntime.InvokeAsync<bool>("checkKeyExists", RoomID);
            if (keyExists) {
                AddStatus("Room key verified in storage");
            } else {
                AddStatus("Warning: No room key found in storage. Requesting a new one from the server...");

                // Request the real room key from the server again
                var encryptedRoomKey = await connection.InvokeAsync<byte[]>("RequestRoomKey", username, RoomName);
                if (encryptedRoomKey == null) {
                    AddStatus("Error: Failed to retrieve room key from server");
                    return;
                }

                // Try decrypting it again
                await _jsRuntime.InvokeAsync<object>("decryptRoomKey", encryptedRoomKey, RoomID);

                // Check one more time
                keyExists = await _jsRuntime.InvokeAsync<bool>("checkKeyExists", RoomID);
                if (!keyExists) {
                    AddStatus("Error: Failed to store the real room key. Chat functionality may be limited.");
                } else {
                    AddStatus("Room key retrieved and stored successfully");
                }
            }
        }
        catch (Exception ex) {
            AddStatus($"Error verifying key: {ex.Message}");
        }
    }

    private async Task InitializeSignalR() {
        AddStatus("Initializing SignalR connection...");
        var hubUrl = Navigation.ToAbsoluteUri("/chathub");

        connection = new HubConnectionBuilder()
            .WithUrl(hubUrl, options => {
                options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                options.SkipNegotiation = true;
            })
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
            .Build();

        connection.On<ChatMessage>("ReceiveMessage", async (message) => {
            AddStatus("Message received");
            Messages.Add(message);

            // Decrypt the new message
            if (message.Content != null && !decryptedMessages.ContainsKey(message.Content))
            {
                try {
                    string decryptedContent = await DecryptMessageContent(message);
                    decryptedMessages[message.Content] = decryptedContent;
                }
                catch (Exception ex) {
                    AddStatus($"Error decrypting received message: {ex.Message}");
                    decryptedMessages[message.Content] = "[Encrypted]";
                }
            }

            await connection.SendAsync("AddEncryptedMessageToChatHistory", RoomID, message);
        });


        AddStatus("Starting connection...");
        await connection.StartAsync();
        AddStatus("Connection established. Validating room...");

        RoomID = await connection.InvokeAsync<string>("ValidateRoom", RoomName);
        if (RoomID == null) {
            AddStatus("Error: Invalid room");
            Navigation.NavigateTo("/error");
            return;
        }

        RoomOwner = await connection.InvokeAsync<string>("SearchRoomOwner", RoomID);
        
        AddStatus($"Room validated. Room ID: {RoomID}");
       
        Messages = await connection.InvokeAsync<List<ChatMessage>>("RequestChatHistory", RoomName);
        if (Messages == null) {
            AddStatus("Error retrieving chat history");
            return;
        } else {
            AddStatus("Chat history retrieved");
        }
    }

    private async Task SendMessage()
    {
        if (connection is not null && !string.IsNullOrEmpty(messageInput) && !string.IsNullOrEmpty(RoomID)
            && !string.IsNullOrEmpty(username))
        {
            AddStatus("Encrypting message...");
            var keyExists = await _jsRuntime.InvokeAsync<bool>("checkKeyExists", RoomID);
            
            if (!keyExists) {
                AddStatus("No encryption key found. Requesting one from the server...");
                
                // Request the room key from the server
                var encryptedRoomKey = await connection.InvokeAsync<byte[]>("RequestRoomKey", username, RoomName);
                if (encryptedRoomKey == null || encryptedRoomKey.Length == 0) {
                    AddStatus("Error: Server returned empty room key");
                    return;
                }
                
                // Decrypt and store the key
                await _jsRuntime.InvokeAsync<object>("decryptRoomKey", encryptedRoomKey, RoomID);
                AddStatus("Room key decrypted and stored successfully");
                
                // Verify the key was stored
                keyExists = await _jsRuntime.InvokeAsync<bool>("checkKeyExists", RoomID);
                if (!keyExists) {
                    AddStatus("Error: Failed to store encryption key after decryption");
                    return;
                }
            }
                
            // encrypt the message
            AddStatus("Key found. Encrypting message...");
            var encryptedMessage = await _jsRuntime.InvokeAsync<byte[]>("encryptMessage", RoomID, messageInput);
            
            if (encryptedMessage == null || encryptedMessage.Length == 0) {
                AddStatus("Error: Message encryption failed");
                return;
            }
            
            AddStatus("Sending encrypted message...");
            
            var message = new ChatMessage {
                Sender = username,
                Content = encryptedMessage,
                Timestamp = DateTime.Now
            };
            
            decryptedMessages[encryptedMessage] = messageInput;
            
            Messages.Add(message);
            await connection.SendAsync("AddEncryptedMessageToChatHistory", RoomID, message);
            messageInput = string.Empty;
            
            AddStatus("Message sent successfully");
        }
    }

    public bool IsConnected =>
        connection?.State == HubConnectionState.Connected;
}