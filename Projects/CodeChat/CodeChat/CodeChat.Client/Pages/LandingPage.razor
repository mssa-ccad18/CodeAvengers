@page "/"
@rendermode InteractiveWebAssembly

@layout Layout.LoginLayout
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics

@using CodeChat.Client.Components.Models
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>CodeChat - Connect with Developers</PageTitle>
<link href="css/home.css" rel="stylesheet" />

<div class="landing-container">
    <div class="landing-content">
        <div class="landing-info">
            <div class="logo">CodeChat</div>
            <h1>Connect with others in real time.</h1>
            <p>CodeChat helps you connect and share with others around the world. Create rooms and talk with one another.</p>
        </div>


        <div class="login-container">
            <div class="login-form">
                <input type="text" @bind="username" placeholder="Email or username" class="login-input" />
                <input type="password" @bind="password" placeholder="Password" class="login-input" />
                <button class="login-button" @onclick="AuthenticateUser" disabled="@(!IsConnected)">Log In</button>


                <div class="login-divider">
                    <span>or</span>
                </div>

                <button class="create-account-button" @onclick="CreateNewAccount" disabled="@(!IsConnected)">Create New Account</button>

                <div class="forgot-password">
                    <a href="#">Forgot password?</a>
                </div>

                <div class="status-message">
                    @status
                </div>

            </div>
            @* <div class="login-status" @disabled="@(statusGood)"> *@
            @*     @if (!statusGood) { *@
            @*         <p>@status</p> *@
            @*     } *@
            @* </div> *@
        </div>
    </div>





    <footer class="landing-footer">
        <div class="footer-links">
            <a href="#">About</a>
        </div>
        <div class="copyright">
            CodeChat © 2025
        </div>
    </footer>
</div>



@code {
    private string? username;
    private string? password;
    private bool statusGood = true;
    private string status = string.Empty;
    private HubConnection? connection;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {

        var hubUrl = Navigation.ToAbsoluteUri("/chathub");

        connection = new HubConnectionBuilder()
            .WithUrl(hubUrl, options =>
            {
                options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                options.SkipNegotiation = true;
            })
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
            .Build();

        await connection.StartAsync();
    }

    private async Task CreateNewAccount()
    {
        await Task.Delay(500);
        Navigation.NavigateTo("/create-account");
    }

    public async Task AuthenticateUser() {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password)) {
            return;
        }
        if (connection is not null) {
            if (connection.State != HubConnectionState.Connected) {
                statusGood = false;
                status = "Error: Connection not established. Please refresh the page.";
                return;
            }
            var isAuthenticated = await connection.InvokeAsync<bool>("AuthenticateUser", username, password);

            if (isAuthenticated) {
                statusGood = true;
                status = "Success: User authenticated.";
                await UserAuthenticated();
            } else {
                statusGood = false;
                status = "Error: Invalid username or password.";
                await UserNotAuthenticated();
            }
        }
    }

    public async Task UserNotAuthenticated()
    {
        await Task.Delay(500);
        Navigation.NavigateTo("/create-account");
    }

    public async Task UserAuthenticated() {
        // Handle user authentication success
        // Redirect to the chat page or show a success message
        await Task.Delay(500);
        Navigation.NavigateTo("/chat");
    }

    public bool IsConnected =>
       connection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (connection is not null)
        {
            await connection.DisposeAsync();
        }
    }

}
