@page "/create-account"
@rendermode InteractiveWebAssembly
@layout Layout.LoginLayout
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using System.Text.Json
@using CodeChat.Client.Components.Models
@inject NavigationManager Navigation
@inject IJSRuntime _jsRuntime
@implements IAsyncDisposable

<PageTitle>CodeChat - Connect with Developers</PageTitle>
<link href="css/home.css" rel="stylesheet" />
<script src="crypto.js"></script>

<div class="account-create-container">
    <div class="login-container" >
        <div class="login-form">
            <input type="text" @bind=username placeholder="Username" class="login-input" />
            <input type="email" @bind=email placeholder="Email" class="login-input" />
            <input type="password" @bind=password placeholder="Password" class="login-input" />
            <input type="password" @bind=verifyPassword placeholder="Verify Password" class="login-input" />
            <button class="create-account-button" @onclick="CreateAccount">Create New Account</button>
        </div>
        <div class="status-message">
            @status
        </div>
    </div>
    <footer class="landing-footer">
        <div class="footer-links">
            <a href="#">About</a>
        </div>
        <div class="copyright">
            CodeChat © 2025
        </div>
    </footer>
</div>

@code {
    private string? username;
    private string? password;
    private string? verifyPassword;
    private string? email;
    private byte[]? publicKey;
    private string status = string.Empty;
    private HubConnection? connection;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {

        var hubUrl = Navigation.ToAbsoluteUri("/chathub");

        connection = new HubConnectionBuilder()
            .WithUrl(hubUrl, options =>
            {
                options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                options.SkipNegotiation = true;
            })
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
            .Build();

        connection.On<string>("AccountCreationFailed", (message) => {
            status = message;
            StateHasChanged();
        });

        connection.On<string>("AccountCreationSuccess", (message) => {
            status = message;
            StateHasChanged();
            Navigation.NavigateTo($"/dashboard/{username}");
        });

        await connection.StartAsync();
    }

    private async Task CreateAccount()
    {
        // check if passwords match
        // if (password != verifyPassword) {
        //     status = "Error: Passwords do not match.";
        //     return;
        // }


        if (connection is not null) // check if there is a connection to the hub
        {
            if (connection.State != HubConnectionState.Connected)
            {
                status = "Error: Connection not established. Please refresh the page.";
                StateHasChanged();
                return;
            }
            // check if username is valid
            // var usernameFree = await connection.InvokeAsync<bool>("CheckUsername", username);
            // if (username.Length < 3 || username.Length > 20 && usernameFree) {
            //     status = "Error: Username must be between 3 and 20 characters.";
            //     return;
            // }
            await GenerateKeyPairAsync();
            await Task.Delay(1000);
            if (publicKey == null) {
                status = "Error: Public key generation failed.";
                return;
            }
            var userCreated = await connection.InvokeAsync<bool>("CreateUser", username, password, email, publicKey);
            await Task.Delay(1000);
            if (userCreated) {
                status = "Account created successfully!";
                // Optionally, redirect to the login page or show a success message
                Navigation.NavigateTo($"/dashboard/{username}");
            } else {
                status = "Error: Account creation failed. Please try again.";
            }
        }
        else
        {
            status = "Error: Connection not established. Please refresh the page.";
        }
    }

    public async Task GenerateKeyPairAsync() {
        if (_jsRuntime == null)
        {
            status = "Error: JavaScript runtime is not available.";
            return;
        }

        // Call the JavaScript function to generate a key pair
        var pubKey = await _jsRuntime.InvokeAsync<byte[]>("generateKeyPair");
        if (pubKey == null) {
            status = "Error: Key pair generation failed.";
            return;
        }
        publicKey = pubKey;
        
    }

    public bool IsConnected =>
       connection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (connection is not null)
        {
            await connection.DisposeAsync();
        }
    }

}
