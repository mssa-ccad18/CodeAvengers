@page "/create-account"
@rendermode InteractiveWebAssembly

@layout Layout.LoginLayout
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics

@using CodeChat.Client.Components.Models
@inject NavigationManager Navigation
@implements IAsyncDisposable

@* injects for error handling and status message update from ChatHub.cs> *@
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>CodeChat - Connect with Developers</PageTitle>
<link href="css/home.css" rel="stylesheet" />



<div class="account-create-container">
    <div class="login-container" >
        <div class="login-form">
            <input type="text" @bind=username placeholder="Username" class="login-input" />
            <input type="email" @bind=email placeholder="Email" class="login-input" />
            <input type="password" @bind=password placeholder="Password" class="login-input" />
            <input type="password" @bind=verifyPassword placeholder="Verify Password" class="login-input" />
            <button class="create-account-button" @onclick="CreateAccount">Create New Account</button>
        </div>
        <div class="status-message">
            @status
        </div>
    </div>





    <footer class="landing-footer">
        <div class="footer-links">
            <a href="#">About</a>
        </div>
        <div class="copyright">
            CodeChat © 2025
        </div>
    </footer>
</div>


@code {
    private string? username;
    private string? password;
    private string? verifyPassword;
    private string? email;
    private string status = string.Empty;
    private HubConnection? connection;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {

        var hubUrl = Navigation.ToAbsoluteUri("/chathub");

        connection = new HubConnectionBuilder()
            .WithUrl(hubUrl, options =>
            {
                options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                options.SkipNegotiation = true;
            })
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
            .Build();

        connection.On<string>("AccountCreationFailed", (message) =>
        {
            status = message;
            StateHasChanged();
        });

        connection.On<string>("AccountCreationSuccess", (message) =>
        {
            status = message;
            StateHasChanged();
        });

        await connection.StartAsync();
    }

    private async Task CreateAccount()
    {
        //this is a redundant catch with ChatHub.cs's first condition in CreateUser
        //if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(email))
        //{
        //    return;
        //}

        if (connection is not null)
        {
            if (connection.State != HubConnectionState.Connected)
            {
                status = "Error: Connection not established. Please refresh the page.";
                return;
            }

            var userCreated = await connection.InvokeAsync<Boolean>("CreateUser", username, email, password, verifyPassword);

            if (userCreated)
            {
                await Task.Delay(2000);
                // Redirects to the login page or show a success message
                Navigation.NavigateTo("/");
            }
            else
            {
                return;
            }
        }
    }

    public async Task AuthenticateUser() {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(email)) {
            return;
        }
        if (connection is not null) {
            if (connection.State != HubConnectionState.Connected) {
                status = "Error: Connection not established. Please refresh the page.";
                return;
            }
            await connection.InvokeAsync("AuthenticateUser", username, password, email);
        }
    }

    public async Task UserAuthenticated() {
        // Handle user authentication success
        // Redirect to the chat page or show a success message
        Navigation.NavigateTo("/chat");
    }

    public bool IsConnected =>
       connection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (connection is not null)
        {
            await connection.DisposeAsync();
        }
    }

    private async Task HandleValidSubmit()
    {
        //handles various account creation errors encountered from ChatHub.cs then uptates status 
        var hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        await hubConnection.StartAsync();

        hubConnection.On<string>("AccountCreationFailed", (message) =>
        {
            status = message;
            StateHasChanged();
        });

        hubConnection.On<string>("AccountCreationSuccess", (message) =>
        {
            status = message;
        });
    }

}
