@page "/"
@rendermode InteractiveWebAssembly
@layout Layout.LoginLayout
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using CodeChat.Client.Components.Models
@using Microsoft.AspNetCore.SignalR
@inject NavigationManager Navigation
@inject ILogger<AccountCreation> Logger
@implements IAsyncDisposable

<h3>Create Account</h3>

<div class="form-group">
    <input @bind="username" placeholder="Username" class="form-control" />
</div>
<div class="form-group">
    <input @bind="publicKey" placeholder="Public Key" class="form-control" />
</div>
<button @onclick="CreateAccount">Send</button>

<div class="mt-3">
    <p>Connection Status: <span class="@(connectionState == HubConnectionState.Connected ? "text-success" : "text-danger")">@connectionState</span></p>
</div>

@* @if (!string.IsNullOrEmpty(status)) *@
@* { *@
@*     <div class="alert @(status.Contains("Error") ? "alert-danger" : "alert-success") mt-3"> *@
@*         @status *@
@*     </div> *@
@* } *@

@code {
    private string? username;
    private string? publicKey;
    private string status = string.Empty;
    private HubConnection? connection;
    // private bool isLoading = false;
    // private bool isInitialized = false;
    private HubConnectionState connectionState = HubConnectionState.Disconnected;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        // try
        // {
        // status = "Connecting to server...";
        // StateHasChanged();

        var hubUrl = Navigation.ToAbsoluteUri("/chathub");

        connection = new HubConnectionBuilder()
            .WithUrl(hubUrl, options =>
            {
                options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                options.SkipNegotiation = true;
            })
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
            .Build();

        // connection.On<User>("UserCreated", async (user) =>
        // {
        //     status = $"User {user.Username} created successfully!";
        //     StateHasChanged();
        // });

        // connection.Closed += async (error) =>
        // {
        //     connectionState = HubConnectionState.Disconnected;
        //     status = "Connection lost. Please refresh the page.";
        //     StateHasChanged();
        // };

        // connection.Reconnecting += async (error) =>
        // {
        //     connectionState = HubConnectionState.Reconnecting;
        //     status = "Reconnecting to server...";
        //     StateHasChanged();
        // };

        // connection.Reconnected += async (connectionId) =>
        // {
        //     connectionState = HubConnectionState.Connected;
        //     status = "Connected to server";
        //     StateHasChanged();
        // };

        await connection.StartAsync();
        // connectionState = HubConnectionState.Connected;
        //     status = "Connected to server";
        //     StateHasChanged();
        // }
        // catch (Exception ex)
        // {
        //     connectionState = HubConnectionState.Disconnected;
        //     status = $"Error connecting to server: {ex.Message}";
        //     StateHasChanged();
        // }
    }

    private async Task DoSomething()
    {
        
    }

    private async Task CreateAccount()
    {
        
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(publicKey))
        {
            // status = "Error: Username and Public Key are required";
            // StateHasChanged();
            return;
        }

        try
        {
         
            // status = "Creating account...";
            // StateHasChanged();
            
            if (connection is not null)
            {
                if (connection.State != HubConnectionState.Connected)
                {
                    status = "Error: Connection not established. Please refresh the page.";
                    StateHasChanged();
                    return;
                }

                await connection.InvokeAsync("CreateUser", username, publicKey);
            }
            else
            {
                // status = "Error: Connection not established";
                // StateHasChanged();
            }
        }
        catch (HubException ex)
        {
            // status = $"Error creating account: {ex.Message}";
            // StateHasChanged();
        }
        catch (Exception ex)
        {
            // status = $"Error creating account: {ex.Message}";
            // StateHasChanged();
        }
        finally
        {
            // isLoading = false;
            // StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (connection is not null)
        {
            await connection.DisposeAsync();
        }
    }
}
